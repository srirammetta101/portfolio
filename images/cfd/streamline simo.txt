import numpy as np
import matplotlib.pyplot as plt

l = 10.0
b = 10.0
N = 41
dx = l / (N - 1)
dy = b / (N - 1)

# Discretisation of domain
x = np.zeros((N, N))
y = np.zeros((N, N))
for i in range(N):
    for j in range(N):
        x[i, j] = dx * j
        y[i, j] = dy * i

# Boundary condition
p = np.ones((N, N))

p[:, 0] = 2
p[40, 0:7] = 2
p[40,7:12] = np.arange(2 + 1/6, 2 + 5/6, 1/6)
p[40,11:18] = 8/3
p[40,18:23] = np.arange(8/3 + 1/6, 8/3 + 5/6, 1/6)
p[40,22:29] = 10/3
p[40,29:34] = np.arange(10/3 + 1/6, 10/3 + 5/6, 1/6)
p[40,33:40] = 4
p[0, 0:8] = np.arange(2, 3.75 + 0.25, 0.25)
p[0, 8:40] = 4
p[:, 40] = 4

A = 2 / dx ** 2 + 2 / dy ** 2

# Solution of PDE
for ct in range(10000):
    for i in range(1, N - 1):
        for j in range(1, N - 1):
            p[i, j] = ((p[i + 1, j] + p[i - 1, j]) / dx ** 2 + (p[i, j + 1] + p[i, j - 1]) / dy ** 2) / A

# Streamline visualization using contours

plt.contourf(x, y, np.rot90(p, 2), 50, cmap='rainbow')
contour_lines = plt.contour(x, y, np.rot90(p, 2), 30, colors='black')
plt.clabel(contour_lines, inline=True, fontsize=8)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Rainbow-Filled Contours with Contour Lines')
plt.colorbar(label='Value')
plt.show()