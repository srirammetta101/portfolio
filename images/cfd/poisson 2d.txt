import numpy as np
import matplotlib.pyplot as plt

l = 10.0
b = 10.0
N = 41
dx = l / (N - 1)
dy = b / (N - 1)

# Discretization of domain
x = np.zeros((N, N))
y = np.zeros((N, N))
for i in range(N):
    for j in range(N):
        x[i, j] = dx * (j)
        y[i, j] = dy * (i)

# Boundary condition
T = np.ones((N, N))

# Iterative solution of PDE
A = (2 / (dx**2)) + (2 / (dy**2))
for ct in range(10000):
    for j in range(1, N - 1):
        for i in range(1, N - 1):
            T[i, j] = (((T[i + 1, j] + T[i - 1, j]) / (dx**2)) +
                       ((T[i, j + 1] + T[i, j - 1]) / (dy**2))) / A + \
                       (100 / A) * np.exp(-8 * ((x[i, j] - 5)**2 + (y[i, j] - 5)**2))

# Plot the contour
plt.contourf(x, y, T, cmap='rainbow')
plt.colorbar()
plt.xlabel('x')
plt.ylabel('y')
plt.title('Temperature Distribution')
plt.show()